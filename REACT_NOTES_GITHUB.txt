REACT NOTLAR 
THE NET NINJA UDEMY COURSE
CODE EXPLAINED
NOTLAR

başlangıç kısmı kodları

=====================

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- react CDN -->
    <script
      crossorigin
      src="https://unpkg.com/react@17/umd/react.development.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"
    ></script>
    <!-- babel CDN  
    https://babeljs.io/setup#installation
örnek kodun içindeki cdn kısmı
-->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <title>Document</title>
  </head>
  <body>
    <h1>my website</h1>

    <div id="banner"></div>
    <footer>
      <p>footer</p>
    </footer>

    <!-- react kodlarının her tarafta çalışabilmesi için babel ile eski js kodlarına dönüştürülmesi lazım -->
    <script type="text/babel">
      const Banner = () => {
        const title = "hoşgeldin";
        const subTitle = "bu da ikinci başlık";
        const address = "https://kbeler.vercel.app/";

        // func tanımlama
        const handleClick = (e) => {
          console.log("you clicked me!");
          console.log("the site title is : ", title);
          console.log(e);
        };

        return (
          <div>
            <p>banner</p>
            <h1>{title.toUpperCase()}</h1>
            <p>{subTitle}</p>
            <p>today's date : {new Date().toDateString()}</p>
            <p>random number : {Math.random() * 100}</p>
            <a href={address}>web sitem</a>
            <button onClick={handleClick}>click me</button>
            <button
              onClick={(e) => {
                console.log("bu inline func");
                console.log(e);
              }}
            >
              inline func
            </button>
          </div>
        );
      };

      // render componenti ekrana basalım
      ReactDOM.render(<Banner />, document.getElementById("banner"));
    </script>
  </body>
</html>

=================

##################       REACT kurulum

npx create-react-app my-app
cd my-app
npm start

veya yarn start

klasör yapısı, public, src
App.css app ile ilgili daha çok, App.js comp import edilir,
index.css ise daha çok global
şimdilik kullanmayacağımız dosyaları kaldıralım,
önemli dosyalar
index.js react'ın başladığı dosya, burada index.html'deki id="root" a yollar uygulamayı/siteyi vs. bunlarda App.js içerisinde olur, o da ana comp zaten, 
her component export edilmeli ve kullanacağımız yerde import edilmeli


##################          STATE

state :  bir componente ait değişebilecek data
mesela bir todo listte todos yapılacak işler bir state, 
mesela boolean bilgiside state olabilir, 

* şimdi aşağıdaki gibi kodumuz var, butona bastığımızda console da isim değişir ancak ekranda değişmez,
------------------------------------------
import "./App.css";

function App() {
  let name = "ronaldo";

  const handleClick = () => {
    name = "messi";
    console.log(name);
  };


  
  return (
    <div className="App">
      <h1>my name is {name}</h1>
      <button onClick={handleClick}>change name</button>
    </div>
  );
}

export default App;
----------------------------------------------

bu yapabilmek için useState hook kullanmalıyız, react'tan useState import > 

______________________
import "./App.css";
import { useState } from "react";

function App() {
  // let name = "ronaldo";
  const [name, setName] = useState("mario");

  const handleClick = () => {
    // name = "messi";
    setName("messi");
    console.log(name);
  };

  return (
    <div className="App">
      <h1>my name is {name}</h1>
      <button onClick={handleClick}>change name</button>
    </div>
  );
}

export default App;

--------------------------------

bu sefer ekranı değiştirdi ancak console önceki name'de kaldı, yani ekran mssi oldu ama console daki name ronaldo kaldı
useState kullanımına dikkat, 
bununla ilgili
https://devnot.com/2018/react-hooks-nedir-ve-nasil-kullanilir/

__________________________________

aşağıdaki kodda tek bir comp içinde state kullanımı, conditional gösterim, filter kullanımı var
-----------------------------------

import "./App.css";
import { useState } from "react";

function App() {
  const [showEvents, setShowEvents] = useState(true);
  const [events, setEvents] = useState([
    { title: "marios's birthday", id: 1 },
    { title: "bowser's live stream", id: 2 },
    { title: "race on farm", id: 3 },
  ]);

  console.log(showEvents);

  const handleClick = (id) => {
    setEvents((prevEvents) => {
      return prevEvents.filter((event) => {
        return id !== event.id;
      });
    });
    console.log(id);
  };

  return (
    <div className="App">
      {showEvents && (
        <div>
          <button onClick={() => setShowEvents(false)}>hide events</button>
        </div>
      )}

      {!showEvents && (
        <div>
          <button onClick={() => setShowEvents(true)}>show events</button>
        </div>
      )}

      {showEvents &&
        events.map((event, index) => (
          <div key={event.id}>
            <h2>
              {index} - {event.title}
            </h2>
            <button onClick={() => handleClick(event.id)}>delete event</button>
          </div>
        ))}
    </div>
  );
}

export default App;

-----------------------------------------

COMPONENTS & PROPS

App bizim root componentimiz, bütün comp lar buna bağlanır,
src>components>Title.js yap büyük harfe dikkat, bu comp hazırlayıp App.js de kullan
App dan Title'a prop mesela başlık App'dan gitsin başlık metni, 

<Title title="yeni başlık" /> şeklinde App.js den yolladık, bunu Title.js'de yakalamalıyız,
bunda da 
export default function Title(props) {
  return (
    <div>   
      <h1 className="title">{props.title}</h1>
      <br />
      <h2 className="subtitle">all the latest events in marion kingdom</h2>
    </div>
  );
}

Title.js de props olarak değilde gelen prop ları kendi ismmleriyle kullanmak istiyorsak, 
export default function Title({ title, subtitle }) {
    kullanırkende props.title değil sadece title şeklinde kullanırız

bu şekilde Title.js comp'u reusable oldu, kullandığımız yerde ana comptan başlık bilgisi Title.js e gidecek,

src>components>Modal.js 
hızlı comp oluşturmak için _rfc mesela dosya adıyla func bazlı comp oluşturur,
Modal.js ve Modal.css oluştur > şimdi bu modalda h2 ve p var burası için bilgileri yine props ile gönderebiliriz ve bu modal ı reusable yapabiliriz, ama mesela göndermek istediğimi bilgilier string, text veya böyle basit şeyler değilde daha karmaşık şeyler olabilir resim, başka comp vb gibi,  
Modal.js içindeki h2 ve p kes > App.js deki <Modal>h2 ve p</Modal> şekline getir > Modal.js ye props gelecek gibi func. parametre gir ve template içine de {props.children} yap veya 
export default function Modal({children}) yapıp template içindeki props ları kaldırabilirsin de

import "./Modal.css";

export default function Modal(props) {
  return (
    <div className="modal-backdrop">
      <div className="modal">       
        {props.children}
      </div>
    </div>
  );
}

prop olarak func yollayalım, modal ı kapatmak için Modal.js e bir buton yapalım, App.js de const [showModal,setShowModal] = useState(true) hazırlayalım, const handleClose = () => {
    setShowModal(false)
}
hazırlayalım ve bu func u prop olarak Modal.js e yollayalım,    
<Modal handleClose={handleClose}>
Modal.js de de destructuring ile alalım                
export default function Modal({ children, handleClose }) {
    kullanırken de 
       <button onClick={handleClose}>close</button>

Portal
react id="root" da render edilir, portal bu root un dışında bir child elde edebilmemizi sağlar
mesela Modal.js i portal ile bu hale getirelim, 
Modal.js e bak, ReactDOM import ettik, return de ReactDOM.createPortal(....., document.body)
dedik yani normalde id="root" da oluşurken bütün app bizim modal root'da değil body de oluşsun dedik, bunu inspect ile de görebiliriz, burada dikkat ediecek konu style konularında artık modal root ile bağlantısı kesildiğinde root a bağlı style lardan etkilenmez, 

src>components>EventList.js yap > bunun içinde bir event list olsun > 


burada da todo listesinin kendisini ayrı bir comp yapalım, EventList.js oluşturup _rfc ile func bazlı bir comp olacak, App.js de componentin kendisi olacak kısmı yani events.map...... kısmını alıp EventList.js ya koyalım, burada iki prop olacak biri events array'i, diğeri handleClick func. ikisinide props olarak yollayacağız, ayrıca ReactFragment kullandığımız için comp' a react ı import edeceğiz > App.js de de comp'u showEvents yanında kullanacağız aşağıda

 {showEvents && <EventList events={events} handleClick={handleClick} />}



---------------------
